true_vars = c(3.84896514, 3.7338355, 1.88719468, 2.47073726, 4.64474196, 1.97727022, 4.86978148, 2.62207358, 1, 4.06654206)
setwd("G:\\My Drive\\Research\\Bandits\\code\\bandits\\ucb_inf\\Output")
xi_simulation <- FALSE
group_outcome <- read.csv("group_outcome_1.csv") %>%
group_by(ite,alg) %>% mutate(x=row_number()) %>%
ungroup()
regret_mse <- read.csv("regret_1.csv") %>%
group_by(ite,alg) %>% mutate(x=row_number()) %>% ungroup()
prop_mse <- read.csv("ipw_aipw_prop.csv") %>%
group_by(ite,alg) %>% mutate(x=row_number()) %>% ungroup()
if (xi_simulation) {
xi_group <- read.csv("group_eps_sim.csv")
xi_regret <- read.csv("regret_mse_eps_sim.csv")
}
# Setting new WD so that results are saved in different folder
setwd("G:\\My Drive\\Research\\Bandits\\code\\bandits\\ucb_inf\\results")
df <- group_outcome %>% filter(ite==0)
df_regret <- regret_mse %>% filter(ite==0)
main_algs <- c("ab", "ucb", "thomp", "eps")
ggplot(df %>% filter(alg == main_algs)) + geom_point(aes(x=x, y=factor(group)), shape=1, alpha=0.6) +
facet_grid(alg ~.) +
theme_bw() +
labs(x='Time Period', y = 'Group') +
theme(axis.text.y = element_text(size = rel(0.7)))
# +   ggsave("group_all.png", width = 10, height = 6, dpi=300, units="in")
adv_algs <- c("ucb", "ucb_inf_eps", "thomp", "thomp_inf_eps")
ggplot(df %>% filter(alg == adv_algs)) + geom_point(aes(x=x, y=factor(group)), shape=1, alpha=0.6) +
facet_grid(alg ~.) +
theme_bw() +
labs(x='Time Period', y = 'Group') +
theme(axis.text.y = element_text(size = rel(0.7)))
ggplot(df_regret, aes(x=x, y=regret)) + geom_line(aes(color=alg)) +
labs(title = "Regret") + xlim(0,7500) +
geom_dl(aes(label=alg), method='last.points') +
theme_bw()
# geom_text_repel(aes(label=alg)) +
# ggsave("regret_eps_n.png", width = 10, height = 6, dpi=300, units="in")
thomp_regret <- regret_mse %>% filter(alg=='thomp') %>% mutate(ite=factor(ite))
ggplot(thomp_regret, aes(x=x, y=regret)) + geom_line(aes(color=ite)) +
labs(title = "Regret for Different Thompson Sampling Iterations") + xlim(0,7500) +
geom_dl(aes(label=ite, size=1), method=list('last.points', cex=0.5)) +
theme_bw()
# geom_text_repel(aes(label=alg)) +
# ggsave("regret_eps_n.png", width = 10, height = 6, dpi=300, units="in")
df_prop <- prop_mse %>% filter(ite==0) %>% rename(mean_mse = mse)
df_mse <- df_regret %>% select(-c(regret, var_mse))
mse <- rbind(df_prop, df_mse)
ggplot(mse %>% filter(alg==main_algs),aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) +
labs(title = "MSE of Mean")
df_prop <- prop_mse %>% filter(ite==1) %>% rename(mean_mse = mse)
df_mse <- df_regret %>% select(-c(regret, var_mse))
mse <- rbind(df_prop, df_mse)
ggplot(mse %>% filter(alg==main_algs),aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) +
labs(title = "MSE of Mean")
less_mse_algs = c("ab", "eps", "ucb_inf_eps", "thomp_inf_eps")
ggplot(mse %>% filter(alg==less_mse_algs),aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) +
labs(title = "MSE of Mean")
ggplot(mse%>% filter(x<300 & alg==less_mse_algs), aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) + labs(title = "MSE of Mean Zoomed") + ylim(0, 8) +   geom_dl(aes(label=alg), method=list('last.points', cex=0.5)) + xlim(0, 400) + ylim(0,4)
weight_algs = c("thomp_ipw", "thomp_aipw", "thomp")
ggplot(mse %>% filter(alg==weight_algs),aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) +
labs(title = "MSE of Mean")
ggplot(mse%>% filter(x<500 & alg==weight_algs), aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) + labs(title = "MSE of Mean Zoomed") + geom_dl(aes(label=alg), method=list('last.points', cex=0.5)) + xlim(0, 600) + ylim(0,50)
compare_weight_algs = c("thomp_ipw", "thomp_aipw", "ucb_inf_eps")
ggplot(mse %>% filter(alg==compare_weight_algs),aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) +
labs(title = "MSE of Mean")
ggplot(mse%>% filter(x<500 & alg==compare_weight_algs), aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) + labs(title = "MSE of Mean Zoomed") + geom_dl(aes(label=alg), method=list('last.points', cex=0.5)) + xlim(0, 600) + ylim(0,50)
ggplot(mse%>% filter(x<500 & alg==compare_weight_algs), aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) + labs(title = "MSE of Mean Zoomed") + geom_dl(aes(label=alg), method=list('last.points', cex=0.5)) + xlim(0, 600) + ylim(0,5)
df_prop <- prop_mse %>% filter(ite==0) %>% rename(mean_mse = mse)
df_mse <- df_regret %>% select(-c(regret, var_mse))
mse <- rbind(df_prop, df_mse)
ggplot(mse %>% filter(alg==main_algs),aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) +
labs(title = "MSE of Mean")
less_mse_algs = c("ab", "eps", "ucb_inf_eps", "thomp_inf_eps")
ggplot(mse %>% filter(alg==less_mse_algs),aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) +
labs(title = "MSE of Mean")
ggplot(mse%>% filter(x<300 & alg==less_mse_algs), aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) + labs(title = "MSE of Mean Zoomed") + ylim(0, 8) +   geom_dl(aes(label=alg), method=list('last.points', cex=0.5)) + xlim(0, 400) + ylim(0,4)
weight_algs = c("thomp_ipw", "thomp_aipw", "thomp")
ggplot(mse %>% filter(alg==weight_algs),aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) +
labs(title = "MSE of Mean")
ggplot(mse%>% filter(x<500 & alg==weight_algs), aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) + labs(title = "MSE of Mean Zoomed") + geom_dl(aes(label=alg), method=list('last.points', cex=0.5)) + xlim(0, 600) + ylim(0,50)
compare_weight_algs = c("thomp_ipw", "thomp_aipw", "ucb_inf_eps")
ggplot(mse %>% filter(alg==compare_weight_algs),aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) +
labs(title = "MSE of Mean")
ggplot(mse%>% filter(x<500 & alg==compare_weight_algs), aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) + labs(title = "MSE of Mean Zoomed") + geom_dl(aes(label=alg), method=list('last.points', cex=0.5)) + xlim(0, 600) + ylim(0,50)
ggplot(mse%>% filter(x<500 & alg==compare_weight_algs), aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) + labs(title = "MSE of Mean Zoomed") + geom_dl(aes(label=alg), method=list('last.points', cex=0.5)) + xlim(0, 600) + ylim(0,5)
compare_weight_algs = c("thomp_ipw", "thomp_aipw", "ucb_inf_eps", "thomp")
ggplot(mse %>% filter(alg==compare_weight_algs),aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) +
labs(title = "MSE of Mean")
ggplot(mse%>% filter(x<500 & alg==compare_weight_algs), aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) + labs(title = "MSE of Mean Zoomed") + geom_dl(aes(label=alg), method=list('last.points', cex=0.5)) + xlim(0, 600) + ylim(0,50)
ggplot(mse%>% filter(x<500 & alg==compare_weight_algs), aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) + labs(title = "MSE of Mean Zoomed") + geom_dl(aes(label=alg), method=list('last.points', cex=0.5)) + xlim(0, 600) + ylim(0,5)
library(jsonlite)
library(dplyr)
library(tidyr)
library(lubridate)
library(aws.s3)
library(rvest)
setwd("G:\\My Drive\\Projects\\COVID_INDIA")
source("amazon_creds.R")
state_code_data <-read.csv("state_code_data.csv") %>% rename(State = state)
pincode_data <- read.csv("./pincode/pincode_cleaned.csv", stringsAsFactors = TRUE) %>% drop_na()
covid_country_data <- read.csv("./python/national_data.csv", stringsAsFactors = TRUE) %>% drop_na()
covid_district_data <- read.csv("./python/district_data.csv", stringsAsFactors = TRUE) %>% drop_na()
write.csv(pincode_data %>% select(District) %>% unique(), "district1.csv")
write.csv(covid_district_data %>% select(District) %>% unique(), "district2.csv")
mywrite <- function(x, file) {
write.csv(x, file, row.names=FALSE)
}
today_date <- as.Date(Sys.Date(), "%y%m%d/")
# ----------------------------------------------------------------------------------------
# HTML Scraping of MOHFW website
# ----------------------------------------------------------------------------------------
mohw_url <- "https://www.mohfw.gov.in/"
html <- read_html(mohw_url)
tbl_path = "//table[@class='table table-striped']"
tbl = html_nodes(html, xpath = tbl_path)[[1]]
df <- html_table(tbl)
df <- df[,c(2:5)]
colnames(df) <- c("State", "Confirmed", "Recovered", "Deceased")
df <- df %>%
mutate(Confirmed = as.numeric(Confirmed), Recovered=as.numeric(Recovered), Deceased=as.numeric(Deceased)) %>% drop_na()
df[df$State=="Telengana","State"] <- "Telangana"
state_data_mohw <- df %>%
merge(state_code_data, by.x=c("State"), by.y=c("State")) %>%
mutate(Confirmed = as.numeric(Confirmed), Recovered=as.numeric(Recovered), Deceased=as.numeric(Deceased)) %>%
mutate(Hospitalized = as.numeric(Confirmed)-(as.numeric(Recovered)+as.numeric(Deceased))) %>%
select(-State) %>%
mutate(State=code) %>%
select(-c(code))
write.csv(state_data_mohw,  paste("./log/state_mohw", today_date,"_", hour(Sys.time()), ".csv",sep=""), row.names = FALSE)
s3write_using(state_data_mohw, FUN = mywrite,
bucket = "coronadailyupdates",
object = "state_mohw")
s3write_using(state_data_mohw, FUN = mywrite,
bucket = "coronadailyupdates",
object = "state")
Confirmed <- sum(df$Confirmed)
Recovered <- sum(df$Recovered)
Deceased <- sum(df$Deceased)
Hospitalized = as.numeric(Confirmed)-(as.numeric(Recovered)+as.numeric(Deceased))
country_data_mohw <- data.frame(Hospitalized, Recovered, Deceased, Confirmed)
write.csv(country_data_mohw,  paste("./log/country_mohw", today_date,"_", hour(Sys.time()), ".csv",sep=""), row.names = FALSE)
s3write_using(country_data_mohw, FUN = mywrite,
bucket = "coronadailyupdates",
object = "country_mohw")
# ----------------------------------------------------------------------------------------
# COUNTRY LEVEL COVID DATA
country_level_data <- covid_country_data
write.csv(country_level_data,  paste("./log/country", today_date,"_", hour(Sys.time()), ".csv",sep=""), row.names = FALSE)
# s3write_using(country_level_data, FUN = mywrite,
#               bucket = "coronadailyupdates",
#               object = "country_covid")
# STATE LEVEL COVID DATA
state_level_data <- covid_district_data %>% merge(state_code_data, by.x=c("State"), by.y=c("State"))%>% mutate(State=code) %>%
select(-c(code, District)) %>% group_by(State) %>% summarise_all(funs(sum))
write.csv(state_level_data,  paste("./log/state", today_date,"_", hour(Sys.time()), ".csv",sep=""), row.names = FALSE)
#
# s3write_using(state_level_data, FUN = mywrite,
#               bucket = "coronadailyupdates",
#               object = "state_covid")
# PINCODE LEVEL COVID DATA
district_data <- merge(pincode_data, covid_district_data, by.x=c("District"), by.y=c("District")) %>% rename(State=State.x)
district_data <- merge(district_data, state_code_data, by.x=c("State.y"), by.y=c("State")) %>%
select(Pincode, code, District, Confirmed) %>% rename(State = code)
write.csv(district_data, paste("./log/district", today_date,"_", hour(Sys.time()), ".csv",sep=""), row.names = FALSE)
#
# s3write_using(district_data, FUN = mywrite,
#               bucket = "coronadailyupdates",
#               object = "district_covid")
s3write_using(district_data, FUN = mywrite,
bucket = "coronadailyupdates",
object = "district_covid")
View(country_level_data)
View(country_data_mohw)
View(state_data_mohw)
View(district_data)
# calculate bias
# Best arm of only AB and UCB
best <- group_outcome %>%  filter(group==which.max(true_means)-1) %>%
group_by(alg, ite) %>% summarise(mn = mean(outcome)) %>%
mutate(bias = mn-max(means)) %>% group_by(alg) %>%
summarise(Bias = mean(bias), sd = sd(bias)/sqrt(n()))
# calculate bias
# Best arm of only AB and UCB
best <- group_outcome %>%  filter(group==which.max(true_means)-1) %>%
group_by(alg, ite) %>% summarise(mn = mean(outcome)) %>%
mutate(bias = mn-max(true_means)) %>% group_by(alg) %>%
summarise(Bias = mean(bias), sd = sd(bias)/sqrt(n()))
ggplot(best, aes(x=alg, y=Bias)) + geom_bar(stat="identity") +
geom_errorbar(aes(ymin=Bias-qnorm(0.975)*sd, ymax=Bias+qnorm(0.975)*sd), width=0.2) +
theme_bw()  + ylim(-0.1, 0.1) + theme(axis.title.x=element_blank()) +
geom_hline(yintercept = 0) + labs(title = "Bias of best arm") +
ggsave("best_bias_2.png", width = 5, height = 5, scale = 0.7, units="in")
# Worst arm of only AB and UCB
worst <- group_outcome %>%  filter(group==which.min(means)-1)  %>%
group_by(alg, ite) %>% summarise(mn = mean(outcome)) %>%
mutate(bias = mn-min(means)) %>% group_by(alg) %>%
summarise(Bias = mean(bias), sd = sd(bias)/sqrt(n()))
# Worst arm of only AB and UCB
worst <- group_outcome %>%  filter(group==which.min(true_means)-1)  %>%
group_by(alg, ite) %>% summarise(mn = mean(outcome)) %>%
mutate(bias = mn-min(true_means)) %>% group_by(alg) %>%
summarise(Bias = mean(bias), sd = sd(bias)/sqrt(n()))
ggplot(worst, aes(x=alg, y=Bias)) + geom_bar(stat="identity") +
geom_errorbar(aes(ymin=Bias-qnorm(0.975)*sd, ymax=Bias+qnorm(0.975)*sd), width=0.2) +
theme_bw()  + ylim(-1, 1) + theme(axis.title.x=element_blank()) +
geom_hline(yintercept = 0) + labs(title = "Bias of worst arm") +
ggsave("worst_bias_2.png", width = 5, height = 5, scale = 0.7, units="in")
# mse of best estimate
# Best arm of only AB and UCB
best <- group_outcome %>%  filter(group==which.max(means)-1) %>%
group_by(alg, ite) %>% summarise(mn = mean(outcome)) %>% group_by(alg) %>%
summarise(m=mean(mn), v=var(mn)) %>% mutate(mse=(m-max(means))^2+v)
# mse of best estimate
# Best arm of only AB and UCB
best <- group_outcome %>%  filter(group==which.max(true_means)-1) %>%
group_by(alg, ite) %>% summarise(mn = mean(outcome)) %>% group_by(alg) %>%
summarise(m=mean(mn), v=var(mn)) %>% mutate(mse=(m-max(true_means))^2+v)
ggplot(best, aes(x=alg, y=mse)) + geom_bar(stat="identity") +
theme_bw()  + ylim(-0.01, 0.01) + theme(axis.title.x=element_blank()) +
geom_hline(yintercept = 0) + labs(title = "MSE of best arm") +
ggsave("best_mse_2.png", width = 5, height = 5, scale = 0.7, units="in")
# worst arm of only AB and UCB
worst <- group_outcome %>%  filter(group==which.min(true_means)-1) %>%
group_by(alg, ite) %>% summarise(mn = mean(outcome)) %>% group_by(alg) %>%
summarise(m=mean(mn), v=var(mn)) %>% mutate(mse=(m-min(true_means))^2+v)
ggplot(worst, aes(x=alg, y=mse)) + geom_bar(stat="identity") +
theme_bw()  + ylim(-1.5, 1.5) + theme(axis.title.x=element_blank()) +
geom_hline(yintercept = 0) + labs(title = "MSE of worst arm") +
ggsave("worst_mse_2.png", width = 5, height = 5, scale = 0.7, units="in")
# estimate normality sim
library(rcompanion)
worst_ab <- group_outcome %>%  filter(group==which.min(means)-1 & alg=='ab') %>%
group_by(ite) %>% summarise(mn = mean(outcome))
# estimate normality sim
library(rcompanion)
worst_ab <- group_outcome %>%  filter(group==which.min(true_means)-1 & alg=='ab') %>%
group_by(ite) %>% summarise(mn = mean(outcome))
plotNormalHistogram(worst_ab$mn, prob = FALSE, col = "gray", main = "Estimates of Worst arm for AB Testing",
linecol = "blue", lwd = 2, length = 1000)
worst_ucb <- group_outcome %>%  filter(group==which.min(true_means)-1 & alg=='ucb') %>%
group_by(ite) %>% summarise(mn = mean(outcome))
plotNormalHistogram(worst_ucb$mn, prob = FALSE, col = "gray", main = "Estimates of Worst arm for UCB",
linecol = "blue", lwd = 2, length = 100)
worst_ucb_inf <- group_outcome %>%  filter(group==which.min(true_means)-1 & alg=='ucb_inf_eps') %>%
group_by(ite) %>% summarise(mn = mean(outcome))
plotNormalHistogram(worst_ucb_inf$mn, prob = FALSE, col = "gray", main = "Estimates of Worst arm for UCB-INF-EPS",
linecol = "blue", lwd = 2, length = 100)
shapiro.test(worst_ab$mn)
shapiro.test(worst_ucb$mn)
shapiro.test(worst_ucb_inf$mn)
hist_df <- group_outcome %>% filter(alg=='ab') %>%  group_by(ite, group) %>% summarise(mn = mean(outcome))
ggplot(hist_df, aes(x = mn)) +
geom_histogram(aes(y =..density..), colour = "black", fill = "white") +
geom_density(aes(y=0.045*..count..), colour="black") +
facet_wrap(group ~., scales = "free_y")
stat_function(fun = dnorm, args = list(mean = mean(hist_df$mn), sd = sd(hist_df$mn)))
worst_ab <- group_outcome %>%  filter(group==6 & alg=='ab') %>%
group_by(ite) %>% summarise(mn = mean(outcome))
plotNormalHistogram(worst_ab$mn, prob = FALSE, col = "gray", main = "Estimates of Worst arm for AB Testing",
linecol = "blue", lwd = 2, length = 1000)
worst_ucb <- group_outcome %>%  filter(group==6 & alg=='ucb') %>%
group_by(ite) %>% summarise(mn = mean(outcome))
plotNormalHistogram(worst_ucb$mn, prob = FALSE, col = "gray", main = "Estimates of Worst arm for UCB",
linecol = "blue", lwd = 2, length = 100)
worst_ucb_inf <- group_outcome %>%  filter(group==6 & alg=='ucb_inf_eps') %>%
group_by(ite) %>% summarise(mn = mean(outcome))
plotNormalHistogram(worst_ucb_inf$mn, prob = FALSE, col = "gray", main = "Estimates of Worst arm for UCB-INF-EPS",
linecol = "blue", lwd = 2, length = 100)
shapiro.test(worst_ab$mn)
shapiro.test(worst_ucb$mn)
shapiro.test(worst_ucb_inf$mn)
#Load Libs
library(readr)
library(dplyr)
library(tidyr)
library(knitr)
library(stringr)
library(selectr)
library(xml2)
library(rvest)
options("scipen"=100, "digits"=4)
setwd("G:\\My Drive\\Projects\\COVID_USA\\data")
# replace  mutate(date = as.Date(yes_date))  replace yes_date with time
today_date <- as.Date(Sys.Date(), "%y%m%d/")
yes_date <- as.Date(Sys.Date(), "%y%m%d/") -1
today_date_mmddyy <- format(today_date, "%m-%d-%Y")
yes_date_mmddyy <- format(yes_date, "%m-%d-%Y")
urlfile="https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/"
today_url = paste(urlfile, today_date_mmddyy, ".csv", sep="")
yes_url <- paste(urlfile, yes_date_mmddyy, ".csv", sep="")
today_data <- read_csv(url(today_url))
yes_data <- read_csv(url(yes_url))
colnames(today_data) <- c('FIPS', 'Admin', "State", "Country", "time", "Latitude", "Longitude", "Confirmed", "Deaths", "Recovered", "activ", 'combinedkey')
today_data <- today_data %>% mutate(date = as.Date(time)) %>% filter(date==today_date)
today_data <- today_data %>% group_by(State, Country, date) %>% summarise(Confirmed = sum(Confirmed), Deaths = sum(Deaths), Recovered = sum(Recovered))
colnames(yes_data) <- c('FIPS', 'Admin', "State", "Country", "time", "Latitude", "Longitude", "Confirmed", "Deaths", "Recovered", "activ", 'combinedkey')
yes_data <- yes_data %>% mutate(date = as.Date(time))  %>% filter(date==yes_date)
yes_data <- yes_data %>% group_by(State, Country, date) %>% summarise(Confirmed = sum(Confirmed), Deaths = sum(Deaths), Recovered = sum(Recovered))
new_data <- merge(today_data, yes_data, by.x=c("Country", "State"), by.y=c("Country", "State")) %>% select(-c(date.x, date.y))
new_data_state <- new_data %>% filter(!is.na(State)) %>% select(-State) %>% group_by(Country) %>%
summarise_all(funs(sum)) %>% mutate(State=NA)
world <- new_data %>% select(-c(Country, State)) %>% summarise_all(funs(sum)) %>% mutate(Country='World', State=NA)
final_data <- rbind(new_data_state, new_data, world) %>%
mutate(region = str_replace(paste(Country, '_', State, sep=''),pattern="_NA",replacement=''))
final_data <- final_data %>%
transmute(region = region,
`Total Confirmed` = Confirmed.x,
`Total Recovered` = Recovered.x,
`Total Deaths` = Deaths.x,
`Total Active` = Confirmed.x-(Recovered.x+Deaths.x),
`New Confirmed` = Confirmed.x-Confirmed.y,
`New Recovered` = Recovered.x-Recovered.y,
`New Deaths` = Deaths.x - Deaths.y,
`New Active`  = `New Confirmed` - (`New Recovered`+`New Deaths`),
`Perc Increase Confirmed` = as.integer(`New Confirmed`/Confirmed.y),
`Perc Increase Deaths` = as.integer(`New Deaths`/Deaths.y))
write.csv(final_data, "country_state_list.csv", row.names = FALSE)
today_date <- as.Date(Sys.Date(), "%y%m%d/") -1
yes_date <- as.Date(Sys.Date(), "%y%m%d/") -2
today_date_mmddyy <- format(today_date, "%m-%d-%Y")
yes_date_mmddyy <- format(yes_date, "%m-%d-%Y")
urlfile="https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/"
today_url = paste(urlfile, today_date_mmddyy, ".csv", sep="")
yes_url <- paste(urlfile, yes_date_mmddyy, ".csv", sep="")
today_data <- read_csv(url(today_url))
yes_data <- read_csv(url(yes_url))
colnames(today_data) <- c('FIPS', 'Admin', "State", "Country", "time", "Latitude", "Longitude", "Confirmed", "Deaths", "Recovered", "activ", 'combinedkey')
today_data <- today_data %>% mutate(date = as.Date(time)) %>% filter(date==today_date)
today_data <- today_data %>% group_by(State, Country, date) %>% summarise(Confirmed = sum(Confirmed), Deaths = sum(Deaths), Recovered = sum(Recovered))
colnames(yes_data) <- c('FIPS', 'Admin', "State", "Country", "time", "Latitude", "Longitude", "Confirmed", "Deaths", "Recovered", "activ", 'combinedkey')
yes_data <- yes_data %>% mutate(date = as.Date(time)) %>% filter(date==yes_date)
yes_data <- yes_data %>% group_by(State, Country, date) %>% summarise(Confirmed = sum(Confirmed), Deaths = sum(Deaths), Recovered = sum(Recovered))
new_data <- merge(today_data, yes_data, by.x=c("Country", "State"), by.y=c("Country", "State")) %>% select(-c(date.x, date.y))
new_data_state <- new_data %>% filter(!is.na(State)) %>% select(-State) %>% group_by(Country) %>%
summarise_all(funs(sum)) %>% mutate(State=NA)
world <- new_data %>% select(-c(Country, State)) %>% summarise_all(funs(sum)) %>% mutate(Country='World', State=NA)
final_data <- rbind(new_data_state, new_data, world) %>%
mutate(region = str_replace(paste(Country, '_', State, sep=''),pattern="_NA",replacement=''))
final_data <- final_data %>%
transmute(region = region,
`Total Confirmed` = Confirmed.x,
`Total Recovered` = Recovered.x,
`Total Deaths` = Deaths.x,
`Total Active` = Confirmed.x-(Recovered.x+Deaths.x),
`New Confirmed` = Confirmed.x-Confirmed.y,
`New Recovered` = Recovered.x-Recovered.y,
`New Deaths` = Deaths.x - Deaths.y,
`New Active`  = `New Confirmed` - (`New Recovered`+`New Deaths`),
`Perc Increase Confirmed` = as.integer(`New Confirmed`/Confirmed.y),
`Perc Increase Deaths` = as.integer(`New Deaths`/Deaths.y))
write.csv(final_data, "country_state_list_yest.csv", row.names = FALSE)
df <- group_outcome %>% group_by(alg, group, ite) %>% count() %>% group_by(alg, group) %>% summarise(mean_alloc = mean(n))
ggplot(df, aes(x=alg, y=mean_alloc)) + geom_bar(stat="identity") + facet_wrap(group ~.)+ theme(axis.text.x = element_text(angle = 90))
library(ggplot2)
library(dplyr)
library(tidyr)
library(directlabels)
true_means = c(3.36139279, 2.440392, 4.12747587, 0.25, 4.04024982, 2.8280871, 1.48811249, 0.2334786, 4.953137, 3)
true_vars = c(3.84896514, 3.7338355, 1.88719468, 2.47073726, 4.64474196, 1.97727022, 4.86978148, 2.62207358, 1, 4.06654206)
setwd("G:\\My Drive\\Research\\Bandits\\code\\bandits\\ucb_inf\\Output")
xi_simulation <- FALSE
group_outcome <- read.csv("group_outcome_1.csv") %>%
group_by(ite,alg) %>% mutate(x=row_number()) %>%
ungroup()
regret_mse <- read.csv("regret_1.csv") %>%
group_by(ite,alg) %>% mutate(x=row_number()) %>% ungroup()
prop_mse <- read.csv("ipw_aipw_prop.csv") %>%
group_by(ite,alg) %>% mutate(x=row_number()) %>% ungroup()
if (xi_simulation) {
xi_group <- read.csv("group_eps_sim.csv")
xi_regret <- read.csv("regret_mse_eps_sim.csv")
}
# Setting new WD so that results are saved in different folder
setwd("G:\\My Drive\\Research\\Bandits\\code\\bandits\\ucb_inf\\results")
df <- group_outcome %>% filter(ite==0)
df_regret <- regret_mse %>% filter(ite==0)
main_algs <- c("ab", "ucb", "thomp", "eps")
ggplot(df %>% filter(alg == main_algs)) + geom_point(aes(x=x, y=factor(group)), shape=1, alpha=0.6) +
facet_grid(alg ~.) +
theme_bw() +
labs(x='Time Period', y = 'Group') +
theme(axis.text.y = element_text(size = rel(0.7)))
# +   ggsave("group_all.png", width = 10, height = 6, dpi=300, units="in")
adv_algs <- c("ucb", "ucb_inf_eps", "thomp", "thomp_inf_eps")
ggplot(df %>% filter(alg == adv_algs)) + geom_point(aes(x=x, y=factor(group)), shape=1, alpha=0.6) +
facet_grid(alg ~.) +
theme_bw() +
labs(x='Time Period', y = 'Group') +
theme(axis.text.y = element_text(size = rel(0.7)))
ggplot(df_regret, aes(x=x, y=regret)) + geom_line(aes(color=alg)) +
labs(title = "Regret") + xlim(0,7500) +
geom_dl(aes(label=alg), method='last.points') +
theme_bw()
# geom_text_repel(aes(label=alg)) +
# ggsave("regret_eps_n.png", width = 10, height = 6, dpi=300, units="in")
thomp_regret <- regret_mse %>% filter(alg=='thomp') %>% mutate(ite=factor(ite))
ggplot(thomp_regret, aes(x=x, y=regret)) + geom_line(aes(color=ite)) +
labs(title = "Regret for Different Thompson Sampling Iterations") + xlim(0,7500) +
geom_dl(aes(label=ite, size=1), method=list('last.points', cex=0.5)) +
theme_bw()
# geom_text_repel(aes(label=alg)) +
# ggsave("regret_eps_n.png", width = 10, height = 6, dpi=300, units="in")
df_prop <- prop_mse %>% filter(ite==0) %>% rename(mean_mse = mse)
df_mse <- df_regret %>% select(-c(regret, var_mse))
mse <- rbind(df_prop, df_mse)
df_prop <- prop_mse %>% filter(ite==0) %>% rename(mean_mse = mse)
df_mse <- df_regret %>% select(-c(regret, var_mse))
mse <- rbind(df_prop, df_mse)
View(df_prop)
df_prop <- prop_mse %>% filter(ite==0) %>% rename(mean_mse = mse) %>% select(-mean_est)
df_mse <- df_regret %>% select(-c(regret, var_mse))
mse <- rbind(df_prop, df_mse)
ggplot(mse %>% filter(alg==main_algs),aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) +
labs(title = "MSE of Mean")
less_mse_algs = c("ab", "eps", "ucb_inf_eps", "thomp_inf_eps")
ggplot(mse %>% filter(alg==less_mse_algs),aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) +
labs(title = "MSE of Mean")
ggplot(mse%>% filter(x<300 & alg==less_mse_algs), aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) + labs(title = "MSE of Mean Zoomed") + ylim(0, 8) +   geom_dl(aes(label=alg), method=list('last.points', cex=0.5)) + xlim(0, 400) + ylim(0,4)
weight_algs = c("thomp_ipw", "thomp_aipw", "thomp")
ggplot(mse %>% filter(alg==weight_algs),aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) +
labs(title = "MSE of Mean")
ggplot(mse%>% filter(x<500 & alg==weight_algs), aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) + labs(title = "MSE of Mean Zoomed") + geom_dl(aes(label=alg), method=list('last.points', cex=0.5)) + xlim(0, 600) + ylim(0,50)
compare_weight_algs = c("thomp_ipw", "thomp_aipw", "ucb_inf_eps", "thomp")
ggplot(mse %>% filter(alg==compare_weight_algs),aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) +
labs(title = "MSE of Mean")
ggplot(mse%>% filter(x<500 & alg==compare_weight_algs), aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) + labs(title = "MSE of Mean Zoomed") + geom_dl(aes(label=alg), method=list('last.points', cex=0.5)) + xlim(0, 600) + ylim(0,50)
ggplot(mse%>% filter(x<500 & alg==compare_weight_algs), aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) + labs(title = "MSE of Mean Zoomed") + geom_dl(aes(label=alg), method=list('last.points', cex=0.5)) + xlim(0, 600) + ylim(0,5)
df <- group_outcome %>% filter(x<2000) %>% group_by(alg, group, ite) %>% count() %>% group_by(alg, group) %>% summarise(mean_alloc = mean(n))
ggplot(df, aes(x=alg, y=mean_alloc)) + geom_bar(stat="identity") + facet_wrap(group ~.) + theme(axis.text.x = element_text(angle = 90))
df <- group_outcome %>% group_by(alg, group, ite) %>% count() %>% group_by(alg, group) %>% summarise(mean_alloc = mean(n))
ggplot(df, aes(x=alg, y=mean_alloc)) + geom_bar(stat="identity") + facet_wrap(group ~.)+ theme(axis.text.x = element_text(angle = 90))
best <- group_outcome %>%  filter(group==which.max(true_means)-1) %>%
group_by(alg, ite) %>% summarise(mn = mean(outcome))
View(best)
library(ggplot2)
library(dplyr)
library(tidyr)
library(directlabels)
true_means = c(3.36139279, 2.440392, 4.12747587, 0.25, 4.04024982, 2.8280871, 1.48811249, 0.2334786, 4.953137, 3)
true_vars = c(3.84896514, 3.7338355, 1.88719468, 2.47073726, 4.64474196, 1.97727022, 4.86978148, 2.62207358, 1, 4.06654206)
setwd("G:\\My Drive\\Research\\Bandits\\code\\bandits\\ucb_inf\\Output")
xi_simulation <- FALSE
group_outcome <- read.csv("group_outcome_1.csv") %>%
group_by(ite,alg) %>% mutate(x=row_number()) %>%
ungroup()
regret_mse <- read.csv("regret_1.csv") %>%
group_by(ite,alg) %>% mutate(x=row_number()) %>% ungroup()
prop_mse <- read.csv("ipw_aipw_prop.csv") %>%
group_by(ite,alg) %>% mutate(x=row_number()) %>% ungroup()
if (xi_simulation) {
xi_group <- read.csv("group_eps_sim.csv")
xi_regret <- read.csv("regret_mse_eps_sim.csv")
}
# Setting new WD so that results are saved in different folder
setwd("G:\\My Drive\\Research\\Bandits\\code\\bandits\\ucb_inf\\results")
df <- group_outcome %>% filter(ite==0)
df_regret <- regret_mse %>% filter(ite==0)
main_algs <- c("ab", "ucb", "thomp", "eps")
ggplot(df %>% filter(alg == main_algs)) + geom_point(aes(x=x, y=factor(group)), shape=1, alpha=0.6) +
facet_grid(alg ~.) +
theme_bw() +
labs(x='Time Period', y = 'Group') +
theme(axis.text.y = element_text(size = rel(0.7)))
# +   ggsave("group_all.png", width = 10, height = 6, dpi=300, units="in")
adv_algs <- c("ucb", "ucb_inf_eps", "thomp", "thomp_inf_eps")
ggplot(df %>% filter(alg == adv_algs)) + geom_point(aes(x=x, y=factor(group)), shape=1, alpha=0.6) +
facet_grid(alg ~.) +
theme_bw() +
labs(x='Time Period', y = 'Group') +
theme(axis.text.y = element_text(size = rel(0.7)))
ggplot(df_regret, aes(x=x, y=regret)) + geom_line(aes(color=alg)) +
labs(title = "Regret") + xlim(0,7500) +
geom_dl(aes(label=alg), method='last.points') +
theme_bw()
# geom_text_repel(aes(label=alg)) +
# ggsave("regret_eps_n.png", width = 10, height = 6, dpi=300, units="in")
thomp_regret <- regret_mse %>% filter(alg=='thomp') %>% mutate(ite=factor(ite))
ggplot(thomp_regret, aes(x=x, y=regret)) + geom_line(aes(color=ite)) +
labs(title = "Regret for Different Thompson Sampling Iterations") + xlim(0,7500) +
geom_dl(aes(label=ite, size=1), method=list('last.points', cex=0.5)) +
theme_bw()
# geom_text_repel(aes(label=alg)) +
# ggsave("regret_eps_n.png", width = 10, height = 6, dpi=300, units="in")
df_prop <- prop_mse %>% filter(ite==0) %>% rename(mean_mse = mse) %>% select(-mean_est)
df_mse <- df_regret %>% select(-c(regret, var_mse))
mse <- rbind(df_prop, df_mse)
ggplot(mse %>% filter(alg==main_algs),aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) +
labs(title = "MSE of Mean")
less_mse_algs = c("ab", "eps", "ucb_inf_eps", "thomp_inf_eps")
ggplot(mse %>% filter(alg==less_mse_algs),aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) +
labs(title = "MSE of Mean")
ggplot(mse%>% filter(x<300 & alg==less_mse_algs), aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) + labs(title = "MSE of Mean Zoomed") + ylim(0, 8) +   geom_dl(aes(label=alg), method=list('last.points', cex=0.5)) + xlim(0, 400) + ylim(0,4)
weight_algs = c("thomp_ipw", "thomp_aipw", "thomp")
ggplot(mse %>% filter(alg==weight_algs),aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) +
labs(title = "MSE of Mean")
ggplot(mse%>% filter(x<500 & alg==weight_algs), aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) + labs(title = "MSE of Mean Zoomed") + geom_dl(aes(label=alg), method=list('last.points', cex=0.5)) + xlim(0, 600) + ylim(0,50)
compare_weight_algs = c("thomp_ipw", "thomp_aipw", "ucb_inf_eps", "thomp")
ggplot(mse %>% filter(alg==compare_weight_algs),aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) +
labs(title = "MSE of Mean")
ggplot(mse%>% filter(x<500 & alg==compare_weight_algs), aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) + labs(title = "MSE of Mean Zoomed") + geom_dl(aes(label=alg), method=list('last.points', cex=0.5)) + xlim(0, 600) + ylim(0,50)
ggplot(mse%>% filter(x<500 & alg==compare_weight_algs), aes(x=x, y=mean_mse)) + geom_line(aes(color=alg)) + labs(title = "MSE of Mean Zoomed") + geom_dl(aes(label=alg), method=list('last.points', cex=0.5)) + xlim(0, 600) + ylim(0,5)
df <- group_outcome %>% filter(x<2000) %>% group_by(alg, group, ite) %>% count() %>% group_by(alg, group) %>% summarise(mean_alloc = mean(n))
ggplot(df, aes(x=alg, y=mean_alloc)) + geom_bar(stat="identity") + facet_wrap(group ~.) + theme(axis.text.x = element_text(angle = 90))
df <- group_outcome %>% group_by(alg, group, ite) %>% count() %>% group_by(alg, group) %>% summarise(mean_alloc = mean(n))
ggplot(df, aes(x=alg, y=mean_alloc)) + geom_bar(stat="identity") + facet_wrap(group ~.)+ theme(axis.text.x = element_text(angle = 90))
xi_group <- xi_group %>% mutate(chi = round(chi,2)) %>%
group_by(chi) %>% mutate(x=row_number()) %>% ungroup()
means <- group_outcome  %>% group_by(group, alg, ite) %>% summarise(mn = mean(outcome))
View(means)
setwd("G:\\My Drive\\Research\\Bandits\\code\\bandits\\ucb_inf\\Output")
prop_mse <- read.csv("ipw_aipw_prop.csv") %>%
group_by(ite,alg) %>% mutate(x=row_number()) %>% ungroup()
